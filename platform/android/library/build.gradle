apply plugin: 'android-library'

android {
	compileSdkVersion rootProject.ext.compileSdkVersion
	buildToolsVersion rootProject.ext.buildToolsVersion

	sourceSets.main {
		jni.srcDirs = []
		jniLibs.srcDir 'src/main/libs'
	}

	/*defaultConfig {
		ndk {
			moduleName "bypass"
		}
	}*/

	libraryVariants.all {
		variant ->
			variant.javaCompile.dependsOn compileCustomNdk
	}
}

ant.condition(property: "os", value: "windows") { os(family: "windows") }
ant.condition(property: "os", value: "unix") { os(family: "unix") }

task compileCustomNdk {
	inputs.dir files('src/main/jni', '../../../src', '../../../dep')
	def objDir = file('src/main/obj')
	def outDirs = files('src/main/libs/armeabi', 'src/main/libs/armeabi-v7a', 'src/main/libs/mips', 'src/main/libs/x86')
	objDir.mkdir()
	outputs.dir outDirs

	doLast {
		println("Compiling Ndk using Make files")

		def ndkCom = (ant.properties.os != 'windows') ? 'ndk-build' : 'ndk-build.cmd'


		exec() {
			workingDir "${projectDir}/src/main/jni"
			executable ndkCom
			//args ['-C${projectDir}/src/main/jni']
		}
	}
}

//task cleanNdk {
//  if (ant.properties.os != 'windows') {
//    logger.error("!!! Ignoring prebuilt native dependencies !!!")
//  } else {
//    delete('src/main/obj', 'src/main/libs/armeabi', 'src/main/libs/armeabi-v7a', 'src/main/libs/mips', 'src/main/libs/x86')
//  }
//}
